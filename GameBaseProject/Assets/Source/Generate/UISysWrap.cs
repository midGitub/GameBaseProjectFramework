//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UISysWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UISys), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("GetHurtTrans", GetHurtTrans);
		L.RegFunction("CreateUIByName", CreateUIByName);
		L.RegFunction("DestroyLuaPanel", DestroyLuaPanel);
		L.RegFunction("DestroyUIByName", DestroyUIByName);
		L.RegFunction("SetVisableByUIName", SetVisableByUIName);
		L.RegFunction("ChangeUICameraCullingMask", ChangeUICameraCullingMask);
		L.RegFunction("RecoveryUICameraCullingMask", RecoveryUICameraCullingMask);
		L.RegFunction("BlockTouch", BlockTouch);
		L.RegFunction("ActiveTouch", ActiveTouch);
		L.RegFunction("EnableUICamera", EnableUICamera);
		L.RegFunction("DisableUICamera", DisableUICamera);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("m_UICamera", get_m_UICamera, set_m_UICamera);
		L.RegVar("hudRoot", get_hudRoot, set_hudRoot);
		L.RegVar("monsterRoot", get_monsterRoot, set_monsterRoot);
		L.RegVar("Instance", get_Instance, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetHurtTrans(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UISys obj = (UISys)ToLua.CheckObject(L, 1, typeof(UISys));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Transform o = obj.GetHurtTrans(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateUIByName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UISys obj = (UISys)ToLua.CheckObject(L, 1, typeof(UISys));
			string arg0 = ToLua.CheckString(L, 2);
			UIComponentBase o = obj.CreateUIByName(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DestroyLuaPanel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UISys obj = (UISys)ToLua.CheckObject(L, 1, typeof(UISys));
			string arg0 = ToLua.CheckString(L, 2);
			obj.DestroyLuaPanel(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DestroyUIByName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UISys obj = (UISys)ToLua.CheckObject(L, 1, typeof(UISys));
			string arg0 = ToLua.CheckString(L, 2);
			obj.DestroyUIByName(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetVisableByUIName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UISys obj = (UISys)ToLua.CheckObject(L, 1, typeof(UISys));
			string arg0 = ToLua.CheckString(L, 2);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			obj.SetVisableByUIName(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ChangeUICameraCullingMask(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UISys obj = (UISys)ToLua.CheckObject(L, 1, typeof(UISys));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.ChangeUICameraCullingMask(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RecoveryUICameraCullingMask(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UISys obj = (UISys)ToLua.CheckObject(L, 1, typeof(UISys));
			obj.RecoveryUICameraCullingMask();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BlockTouch(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UISys obj = (UISys)ToLua.CheckObject(L, 1, typeof(UISys));
			obj.BlockTouch();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ActiveTouch(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UISys obj = (UISys)ToLua.CheckObject(L, 1, typeof(UISys));
			obj.ActiveTouch();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EnableUICamera(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UISys obj = (UISys)ToLua.CheckObject(L, 1, typeof(UISys));
			obj.EnableUICamera();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DisableUICamera(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UISys obj = (UISys)ToLua.CheckObject(L, 1, typeof(UISys));
			obj.DisableUICamera();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_UICamera(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UISys obj = (UISys)o;
			UnityEngine.Camera ret = obj.m_UICamera;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_UICamera on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_hudRoot(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UISys obj = (UISys)o;
			UnityEngine.Transform ret = obj.hudRoot;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index hudRoot on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_monsterRoot(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UISys obj = (UISys)o;
			UnityEngine.Transform ret = obj.monsterRoot;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index monsterRoot on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UISys.Instance);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_UICamera(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UISys obj = (UISys)o;
			UnityEngine.Camera arg0 = (UnityEngine.Camera)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Camera));
			obj.m_UICamera = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_UICamera on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_hudRoot(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UISys obj = (UISys)o;
			UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Transform));
			obj.hudRoot = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index hudRoot on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_monsterRoot(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UISys obj = (UISys)o;
			UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Transform));
			obj.monsterRoot = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index monsterRoot on a nil value" : e.Message);
		}
	}
}

